#========================================================================================
#Kafka 실행(zookeeper -> kafka -> topic 생성 -> consumer 실행)
#========================================================================================
zookeeper-server-start.bat c:\kafka\config\zookeeper.properties
kafka-server-start.bat c:\kafka\config\server.properties

kafka-topics.bat --zookeeper localhost:2181 --topic gbike --create --partitions 1 --replication-factor 1
kafka-topics.bat --list --zookeeper localhost:2181
kafka-console-consumer.bat --bootstrap-server http://localhost:9092 --topic gbike --from-beginning

#========================================================================================
#서비스 실행
#========================================================================================
cd bike
mvn spring-boot:run

cd billing
mvn spring-boot:run 

cd rent
mvn spring-boot:run  

cd rentAndBillingView
mvn spring-boot:run

cd userDeposit
mvn spring-boot:run  

cd gateway
mvn spring-boot:run

#========================================================================================
#시나리오 검증
#========================================================================================
###[UserDeposit 등록]
http POST http://20.194.44.70:8080/userDeposits userid=1 deposit=100000
http POST http://20.194.44.70:8080/userDeposits userid=2 deposit=200000
http POST http://20.194.44.70:8080/userDeposits userid=3 deposit=200000

###[UserDeposit 확인]
http GET http://20.194.44.70:8080/userDeposits

###[Bike 등록]
http POST http://20.194.44.70:8080/bikes bikeid=1 status=사용가능 location=분당_정자역_1구역
http POST http://20.194.44.70:8080/bikes bikeid=2 status=사용중 location=분당_정자역_1구역
http POST http://20.194.44.70:8080/bikes bikeid=3 status=불량 location=분당_정자역_1구역

###[Bike 확인]
http GET http://20.194.44.70:8080/bikes


###[Rent - Rented Pub]
[대여(rent) 전 확인]
http GET http://20.194.44.70:8080/bikes
http GET http://20.194.44.70:8080/rents
http GET http://20.194.44.70:8080/userDeposits
http GET http://20.194.44.70:8080/rentAndBillingViews
http GET http://20.194.44.70:8080/billings

###[대여(rent)]
http POST http://20.194.44.70:8080/rents userid=1 bikeid=1

[대여(rent) 및 CQRS - BikeDepository 확인]
http GET http://20.194.44.70:8080/rents/1
http GET http://20.194.44.70:8080/rentAndBillingViews

###[반납(return)]
http PATCH http://20.194.44.70:8080/rents/1 endlocation=분당_정자역_3구역

###[반납(return) 후 확인]
http GET http://20.194.44.70:8080/bikes
http GET http://20.194.44.70:8080/rents
http GET http://20.194.44.70:8080/userDeposits
http GET http://20.194.44.70:8080/rentAndBillingViews
http GET http://20.194.44.70:8080/billings

###[Rent - Rent실패 케이스]
http POST http://20.194.44.70:8080/rents bikeid=2 userid=2
http POST http://20.194.44.70:8080/rents bikeid=3 userid=2



###[데이터 초기화]
http DELETE http://20.194.44.70:8080/billings/1
http DELETE http://20.194.44.70:8080/billings/2
http DELETE http://20.194.44.70:8080/billings/3

http DELETE http://20.194.44.70:8080/rentAndBillingView/1
http DELETE http://20.194.44.70:8080/rentAndBillingView/2
http DELETE http://20.194.44.70:8080/rentAndBillingView/3

http DELETE http://20.194.44.70:8080/bikes/1
http DELETE http://20.194.44.70:8080/bikes/2
http DELETE http://20.194.44.70:8080/bikes/3

http DELETE http://20.194.44.70:8080/rents/1
http DELETE http://20.194.44.70:8080/rents/2
http DELETE http://20.194.44.70:8080/rents/3

http DELETE http://20.194.44.70:8080/userDeposits/1
http DELETE http://20.194.44.70:8080/userDeposits/2
http DELETE http://20.194.44.70:8080/userDeposits/3

#========================================================================================
[KAFKA 설치]
#========================================================================================
#helm 설치 커맨드 <- v2.17.0 설치되어 있으므로 생략
#curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 > get_helm.sh
#chmod 700 get_helm.sh
#./get_helm.sh

#v2.17.0 설치 확인
helm version 

curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash
kubectl --namespace kube-system create sa tiller # helm 의 설치관리자를 위한 시스템 사용자 생성
kubectl create clusterrolebinding tiller --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
helm init --service-account tiller

helm repo add incubator https://charts.helm.sh/incubator
helm repo update
helm install --name my-kafka --namespace kafka incubator/kafka

kubectl get namespace
kubectl -n kafka exec my-kafka-0 -- /usr/bin/kafka-topics --zookeeper my-kafka-zookeeper:2181 --topic gbike --create --partitions 3 --replication-factor 3
kubectl -n kafka exec my-kafka-0 -- /usr/bin/kafka-topics --zookeeper my-kafka-zookeeper:2181 --list

#확인
kubectl -n kafka exec -ti my-kafka-0 -- /usr/bin/kafka-console-producer --broker-list my-kafka:9092 --topic gbike
kubectl -n kafka exec -ti my-kafka-0 -- /usr/bin/kafka-console-consumer --bootstrap-server my-kafka:9092 --topic gbike --from-beginning

helm del --purge my-kafka
#----------------------------
kubectl patch deploy --namespace kube-system tiller-deploy -p '{"spec":{"template":{"spec":{"serviceAccount":"tiller"}}}}'
위 명령어를 실행하면 아래와 같이 default storage가 두 개로 설정되는 오류가 발생

root@labs--1975389722:/home/project# kubectl get sc
NAME                        PROVISIONER                RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE
azurefile                   kubernetes.io/azure-file   Delete          Immediate              true                   22h
azurefile-premium           kubernetes.io/azure-file   Delete          Immediate              true                   22h
default (default)           kubernetes.io/azure-disk   Delete          WaitForFirstConsumer   true                   22h
managed-premium (default)   kubernetes.io/azure-disk   Delete          WaitForFirstConsumer   true                   22h
#----------------------------
>>> 해결책은 아래 Command 실행
kubectl patch storageclass managed-premium -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"false"}}}'
#========================================================================================

[#Azure 관련]
-------------------------------
ㅇ 접속계정 : user01@skusers01gmail.onmicrosoft.com
ㅇ 리소스 그룹 : skcc-1team-rsrcgrp
ㅇ Kubernetes 클러스터 이름 : skcc-1team-aks
  ※ aks : Azure Kubernetes Service
ㅇ 컨테이너 레지스트리(ACR) 이름 : skcc1team
  ※ ACR : Azure Container Registry
#========================================================================================
#Azure 연결
az login

#azure shell 에서 클러스터 연결
#az aks get-credentials --resource-group (user01_resource_group) --name (user01_cluster)
az aks get-credentials --resource-group skcc-1team-rsrcgrp --name skcc-1team-aks

chmod 600 /root/.kube/config
kubectl get all

#AKS와 ACR 연결
#az aks update -n [azure-cluster-name] -g [azure-resource-Group-name] --attach-acr [azure-acr-name]
az aks update -n skcc-1team-aks -g skcc-1team-rsrcgrp --attach-acr skcc1team

#========================================================================================
#소스가져오기
#========================================================================================
git clone https:/github.com/skcc-1st-team/gbike.git
#========================================================================================

#========================================================================================
#네임스페이스 만들기
#========================================================================================
kubectl create ns gbike
kubectl get ns
kubectl get all -n gbike
#========================================================================================

#폴더이동
cd gbike

#========================================================================================
#Deployment & Build & Push
#========================================================================================
cd /home/project/gbike/bike
mvn clean
mvn compile
mvn package

az acr build --registry skcc1team --image skcc1team.azurecr.io/bike:latest .
#docker push skcc1team.azurecr.io/bike:latest
#kubectl create -f ./kubernetes/deployment.yml -n gbike
#kubectl create -f ./kubernetes/service.yaml -n gbike

kubectl create deploy bike --image=skcc1team.azurecr.io/bike:latest -n gbike
kubectl get all -n gbike

kubectl expose deploy bike --type=ClusterIP --port=8088 -n gbike

#이미지 build & push
cd /home/project/gbike/billing
mvn clean
mvn compile
mvn package

az acr build --registry skcc1team --image skcc1team.azurecr.io/billing:latest .
#kubectl create -f ./kubernetes/deployment.yml -n gbike
#kubectl create -f ./kubernetes/service.yaml -n gbike

kubectl create deploy billing --image=skcc1team.azurecr.io/billing:latest -n gbike
kubectl get all -n gbike

kubectl expose deploy billing --type=ClusterIP --port=8080 -n gbike

#이미지 build & push
cd /home/project/gbike/rent
#kubectl delete deployment rent -n gbike
mvn clean
mvn compile
mvn package

az acr build --registry skcc1team --image skcc1team.azurecr.io/rent:latest .
kubectl create -f ./kubernetes/deployment.yml -n gbike
#kubectl create -f ./kubernetes/service.yaml -n gbike

#kubectl create deploy rent --image=skcc1team.azurecr.io/rent:latest -n gbike
kubectl get all -n gbike

kubectl expose deploy rent --type=ClusterIP --port=8080 -n gbike

#이미지 build & push
cd /home/project/gbike/rentAndBillingView
mvn clean
mvn compile
mvn package

az acr build --registry skcc1team --image skcc1team.azurecr.io/rentandbillingview:latest .
#kubectl create -f ./kubernetes/deployment.yml -n gbike
#kubectl create -f ./kubernetes/service.yaml -n gbike

kubectl create deploy rentandbillingview --image=skcc1team.azurecr.io/rentandbillingview:latest -n gbike
kubectl get all -n gbike

kubectl expose deploy rentandbillingview --type=ClusterIP --port=8080 -n gbike

#이미지 build & push
cd /home/project/gbike/userDeposit
mvn clean
mvn compile
mvn package

az acr build --registry skcc1team --image skcc1team.azurecr.io/userdeposit:latest .
#kubectl create -f ./kubernetes/deployment.yml -n gbike
#kubectl create -f ./kubernetes/service.yaml -n gbike

kubectl create deploy userdeposit --image=skcc1team.azurecr.io/userdeposit:latest -n gbike
kubectl get all -n gbike

kubectl expose deploy userdeposit --type=ClusterIP --port=8080 -n gbike

#이미지 build & push
cd /home/project/gbike/gateway
mvn clean
mvn compile
mvn package

az acr build --registry skcc1team --image skcc1team.azurecr.io/gateway:latest .
#kubectl create -f ./kubernetes/deployment.yml -n gbike
#kubectl create -f ./kubernetes/service.yaml -n gbike
#kubectl apply -f ./kubernetes/deployment.yml -n gbike
#kubectl apply -f ./kubernetes/service.yaml -n gbike

kubectl create deploy gateway --image=skcc1team.azurecr.io/gateway:latest -n gbike
kubectl get all -n gbike

kubectl expose deploy gateway --type=LoadBalancer --port=8080 -n gbike

kubectl describe pod/gateway-7cffc5cd4d-bdbhx -n gbike
kubectl logs -f pod/gateway-7cffc5cd4d-bdbhx -n gbike

#========================================================================================
#Config Map
#========================================================================================
kubectl create configmap configmap-bikeurl --from-file=/home/project/gbike/rent/kubernetes/deployment-config.yaml -n gbike
#kubectl apply -f deployment-config.yaml -n gbike
#kubectl create configmap configmap-bikeurl --from-literal=bikeurl=http://bike:8080 -n gbike
kubectl get configmap configmap-bikeurl -o yaml -n gbike

#========================================================================================
#Circuit Breaker
#========================================================================================
siege -c5 -t10S -r10 -v --content-type "application/json" 'http://20.194.44.70:8080/rents POST {"bikeid": "1", "userid": "1"}'

#========================================================================================
#무정지 재배포
#========================================================================================
kubectl get all -n gbike

az acr build --registry skcc1team --image skcc1team.azurecr.io/billing:v1 .
kubectl apply -f kubernetes/deployment.yml -n gbike
kubectl get all -n gbike

#========================================================================================
#기타
#========================================================================================
kubectl describe pod/nginx3-7cffc5cd4d-bdbhx -n gbike

kubectl apply -f deployment-config.yaml -n gbike
